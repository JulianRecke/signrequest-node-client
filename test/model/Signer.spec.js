/**
 * SignRequest API
 * API for SignRequest.com
 *
 * OpenAPI spec version: v1
 * Contact: tech-support@signrequest.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SignrequestClient);
  }
}(this, function(expect, SignrequestClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SignrequestClient.Signer();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Signer', function() {
    it('should create an instance of Signer', function() {
      // uncomment below and update the code to test Signer
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be.a(SignrequestClient.Signer);
    });

    it('should have the property email (base name: "email")', function() {
      // uncomment below and update the code to test the property email
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be();
    });

    it('should have the property displayName (base name: "display_name")', function() {
      // uncomment below and update the code to test the property displayName
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be();
    });

    it('should have the property firstName (base name: "first_name")', function() {
      // uncomment below and update the code to test the property firstName
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be();
    });

    it('should have the property lastName (base name: "last_name")', function() {
      // uncomment below and update the code to test the property lastName
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be();
    });

    it('should have the property emailViewed (base name: "email_viewed")', function() {
      // uncomment below and update the code to test the property emailViewed
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be();
    });

    it('should have the property viewed (base name: "viewed")', function() {
      // uncomment below and update the code to test the property viewed
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be();
    });

    it('should have the property signed (base name: "signed")', function() {
      // uncomment below and update the code to test the property signed
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be();
    });

    it('should have the property downloaded (base name: "downloaded")', function() {
      // uncomment below and update the code to test the property downloaded
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be();
    });

    it('should have the property signedOn (base name: "signed_on")', function() {
      // uncomment below and update the code to test the property signedOn
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be();
    });

    it('should have the property needsToSign (base name: "needs_to_sign")', function() {
      // uncomment below and update the code to test the property needsToSign
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be();
    });

    it('should have the property approveOnly (base name: "approve_only")', function() {
      // uncomment below and update the code to test the property approveOnly
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be();
    });

    it('should have the property notifyOnly (base name: "notify_only")', function() {
      // uncomment below and update the code to test the property notifyOnly
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be();
    });

    it('should have the property inPerson (base name: "in_person")', function() {
      // uncomment below and update the code to test the property inPerson
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be();
    });

    it('should have the property order (base name: "order")', function() {
      // uncomment below and update the code to test the property order
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be();
    });

    it('should have the property language (base name: "language")', function() {
      // uncomment below and update the code to test the property language
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be();
    });

    it('should have the property forceLanguage (base name: "force_language")', function() {
      // uncomment below and update the code to test the property forceLanguage
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be();
    });

    it('should have the property emailed (base name: "emailed")', function() {
      // uncomment below and update the code to test the property emailed
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be();
    });

    it('should have the property verifyPhoneNumber (base name: "verify_phone_number")', function() {
      // uncomment below and update the code to test the property verifyPhoneNumber
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be();
    });

    it('should have the property verifyBankAccount (base name: "verify_bank_account")', function() {
      // uncomment below and update the code to test the property verifyBankAccount
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be();
    });

    it('should have the property declined (base name: "declined")', function() {
      // uncomment below and update the code to test the property declined
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be();
    });

    it('should have the property declinedOn (base name: "declined_on")', function() {
      // uncomment below and update the code to test the property declinedOn
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be();
    });

    it('should have the property forwarded (base name: "forwarded")', function() {
      // uncomment below and update the code to test the property forwarded
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be();
    });

    it('should have the property forwardedOn (base name: "forwarded_on")', function() {
      // uncomment below and update the code to test the property forwardedOn
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be();
    });

    it('should have the property forwardedToEmail (base name: "forwarded_to_email")', function() {
      // uncomment below and update the code to test the property forwardedToEmail
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be();
    });

    it('should have the property forwardedReason (base name: "forwarded_reason")', function() {
      // uncomment below and update the code to test the property forwardedReason
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be();
    });

    it('should have the property message (base name: "message")', function() {
      // uncomment below and update the code to test the property message
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be();
    });

    it('should have the property embedUrlUserId (base name: "embed_url_user_id")', function() {
      // uncomment below and update the code to test the property embedUrlUserId
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be();
    });

    it('should have the property inputs (base name: "inputs")', function() {
      // uncomment below and update the code to test the property inputs
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be();
    });

    it('should have the property embedUrl (base name: "embed_url")', function() {
      // uncomment below and update the code to test the property embedUrl
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be();
    });

    it('should have the property attachments (base name: "attachments")', function() {
      // uncomment below and update the code to test the property attachments
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be();
    });

    it('should have the property redirectUrl (base name: "redirect_url")', function() {
      // uncomment below and update the code to test the property redirectUrl
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be();
    });

    it('should have the property afterDocument (base name: "after_document")', function() {
      // uncomment below and update the code to test the property afterDocument
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be();
    });

    it('should have the property integrations (base name: "integrations")', function() {
      // uncomment below and update the code to test the property integrations
      //var instane = new SignrequestClient.Signer();
      //expect(instance).to.be();
    });

  });

}));
