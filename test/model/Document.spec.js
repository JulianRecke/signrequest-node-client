/**
 * SignRequest API
 * API for SignRequest.com
 *
 * OpenAPI spec version: v1
 * Contact: tech-support@signrequest.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SignrequestClient);
  }
}(this, function(expect, SignrequestClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SignrequestClient.Document();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Document', function() {
    it('should create an instance of Document', function() {
      // uncomment below and update the code to test Document
      //var instane = new SignrequestClient.Document();
      //expect(instance).to.be.a(SignrequestClient.Document);
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instane = new SignrequestClient.Document();
      //expect(instance).to.be();
    });

    it('should have the property uuid (base name: "uuid")', function() {
      // uncomment below and update the code to test the property uuid
      //var instane = new SignrequestClient.Document();
      //expect(instance).to.be();
    });

    it('should have the property user (base name: "user")', function() {
      // uncomment below and update the code to test the property user
      //var instane = new SignrequestClient.Document();
      //expect(instance).to.be();
    });

    it('should have the property fileAsPdf (base name: "file_as_pdf")', function() {
      // uncomment below and update the code to test the property fileAsPdf
      //var instane = new SignrequestClient.Document();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new SignrequestClient.Document();
      //expect(instance).to.be();
    });

    it('should have the property externalId (base name: "external_id")', function() {
      // uncomment below and update the code to test the property externalId
      //var instane = new SignrequestClient.Document();
      //expect(instance).to.be();
    });

    it('should have the property frontendId (base name: "frontend_id")', function() {
      // uncomment below and update the code to test the property frontendId
      //var instane = new SignrequestClient.Document();
      //expect(instance).to.be();
    });

    it('should have the property file (base name: "file")', function() {
      // uncomment below and update the code to test the property file
      //var instane = new SignrequestClient.Document();
      //expect(instance).to.be();
    });

    it('should have the property fileFromUrl (base name: "file_from_url")', function() {
      // uncomment below and update the code to test the property fileFromUrl
      //var instane = new SignrequestClient.Document();
      //expect(instance).to.be();
    });

    it('should have the property eventsCallbackUrl (base name: "events_callback_url")', function() {
      // uncomment below and update the code to test the property eventsCallbackUrl
      //var instane = new SignrequestClient.Document();
      //expect(instance).to.be();
    });

    it('should have the property fileFromContent (base name: "file_from_content")', function() {
      // uncomment below and update the code to test the property fileFromContent
      //var instane = new SignrequestClient.Document();
      //expect(instance).to.be();
    });

    it('should have the property fileFromContentName (base name: "file_from_content_name")', function() {
      // uncomment below and update the code to test the property fileFromContentName
      //var instane = new SignrequestClient.Document();
      //expect(instance).to.be();
    });

    it('should have the property template (base name: "template")', function() {
      // uncomment below and update the code to test the property template
      //var instane = new SignrequestClient.Document();
      //expect(instance).to.be();
    });

    it('should have the property prefillTags (base name: "prefill_tags")', function() {
      // uncomment below and update the code to test the property prefillTags
      //var instane = new SignrequestClient.Document();
      //expect(instance).to.be();
    });

    it('should have the property integrations (base name: "integrations")', function() {
      // uncomment below and update the code to test the property integrations
      //var instane = new SignrequestClient.Document();
      //expect(instance).to.be();
    });

    it('should have the property fileFromSf (base name: "file_from_sf")', function() {
      // uncomment below and update the code to test the property fileFromSf
      //var instane = new SignrequestClient.Document();
      //expect(instance).to.be();
    });

    it('should have the property autoDeleteDays (base name: "auto_delete_days")', function() {
      // uncomment below and update the code to test the property autoDeleteDays
      //var instane = new SignrequestClient.Document();
      //expect(instance).to.be();
    });

    it('should have the property pdf (base name: "pdf")', function() {
      // uncomment below and update the code to test the property pdf
      //var instane = new SignrequestClient.Document();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instane = new SignrequestClient.Document();
      //expect(instance).to.be();
    });

    it('should have the property apiUsed (base name: "api_used")', function() {
      // uncomment below and update the code to test the property apiUsed
      //var instane = new SignrequestClient.Document();
      //expect(instance).to.be();
    });

    it('should have the property securityHash (base name: "security_hash")', function() {
      // uncomment below and update the code to test the property securityHash
      //var instane = new SignrequestClient.Document();
      //expect(instance).to.be();
    });

    it('should have the property attachments (base name: "attachments")', function() {
      // uncomment below and update the code to test the property attachments
      //var instane = new SignrequestClient.Document();
      //expect(instance).to.be();
    });

    it('should have the property autoDeleteAfter (base name: "auto_delete_after")', function() {
      // uncomment below and update the code to test the property autoDeleteAfter
      //var instane = new SignrequestClient.Document();
      //expect(instance).to.be();
    });

  });

}));
