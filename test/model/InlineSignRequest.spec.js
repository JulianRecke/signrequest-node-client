/**
 * SignRequest API
 * API for SignRequest.com
 *
 * OpenAPI spec version: v1
 * Contact: tech-support@signrequest.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SignrequestClient);
  }
}(this, function(expect, SignrequestClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SignrequestClient.InlineSignRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InlineSignRequest', function() {
    it('should create an instance of InlineSignRequest', function() {
      // uncomment below and update the code to test InlineSignRequest
      //var instane = new SignrequestClient.InlineSignRequest();
      //expect(instance).to.be.a(SignrequestClient.InlineSignRequest);
    });

    it('should have the property fromEmail (base name: "from_email")', function() {
      // uncomment below and update the code to test the property fromEmail
      //var instane = new SignrequestClient.InlineSignRequest();
      //expect(instance).to.be();
    });

    it('should have the property fromEmailName (base name: "from_email_name")', function() {
      // uncomment below and update the code to test the property fromEmailName
      //var instane = new SignrequestClient.InlineSignRequest();
      //expect(instance).to.be();
    });

    it('should have the property isBeingPrepared (base name: "is_being_prepared")', function() {
      // uncomment below and update the code to test the property isBeingPrepared
      //var instane = new SignrequestClient.InlineSignRequest();
      //expect(instance).to.be();
    });

    it('should have the property prepareUrl (base name: "prepare_url")', function() {
      // uncomment below and update the code to test the property prepareUrl
      //var instane = new SignrequestClient.InlineSignRequest();
      //expect(instance).to.be();
    });

    it('should have the property redirectUrl (base name: "redirect_url")', function() {
      // uncomment below and update the code to test the property redirectUrl
      //var instane = new SignrequestClient.InlineSignRequest();
      //expect(instance).to.be();
    });

    it('should have the property requiredAttachments (base name: "required_attachments")', function() {
      // uncomment below and update the code to test the property requiredAttachments
      //var instane = new SignrequestClient.InlineSignRequest();
      //expect(instance).to.be();
    });

    it('should have the property disableAttachments (base name: "disable_attachments")', function() {
      // uncomment below and update the code to test the property disableAttachments
      //var instane = new SignrequestClient.InlineSignRequest();
      //expect(instance).to.be();
    });

    it('should have the property disableTextSignatures (base name: "disable_text_signatures")', function() {
      // uncomment below and update the code to test the property disableTextSignatures
      //var instane = new SignrequestClient.InlineSignRequest();
      //expect(instance).to.be();
    });

    it('should have the property disableText (base name: "disable_text")', function() {
      // uncomment below and update the code to test the property disableText
      //var instane = new SignrequestClient.InlineSignRequest();
      //expect(instance).to.be();
    });

    it('should have the property disableDate (base name: "disable_date")', function() {
      // uncomment below and update the code to test the property disableDate
      //var instane = new SignrequestClient.InlineSignRequest();
      //expect(instance).to.be();
    });

    it('should have the property disableEmails (base name: "disable_emails")', function() {
      // uncomment below and update the code to test the property disableEmails
      //var instane = new SignrequestClient.InlineSignRequest();
      //expect(instance).to.be();
    });

    it('should have the property disableUploadSignatures (base name: "disable_upload_signatures")', function() {
      // uncomment below and update the code to test the property disableUploadSignatures
      //var instane = new SignrequestClient.InlineSignRequest();
      //expect(instance).to.be();
    });

    it('should have the property subject (base name: "subject")', function() {
      // uncomment below and update the code to test the property subject
      //var instane = new SignrequestClient.InlineSignRequest();
      //expect(instance).to.be();
    });

    it('should have the property message (base name: "message")', function() {
      // uncomment below and update the code to test the property message
      //var instane = new SignrequestClient.InlineSignRequest();
      //expect(instance).to.be();
    });

    it('should have the property who (base name: "who")', function() {
      // uncomment below and update the code to test the property who
      //var instane = new SignrequestClient.InlineSignRequest();
      //expect(instance).to.be();
    });

    it('should have the property sendReminders (base name: "send_reminders")', function() {
      // uncomment below and update the code to test the property sendReminders
      //var instane = new SignrequestClient.InlineSignRequest();
      //expect(instance).to.be();
    });

    it('should have the property signers (base name: "signers")', function() {
      // uncomment below and update the code to test the property signers
      //var instane = new SignrequestClient.InlineSignRequest();
      //expect(instance).to.be();
    });

    it('should have the property uuid (base name: "uuid")', function() {
      // uncomment below and update the code to test the property uuid
      //var instane = new SignrequestClient.InlineSignRequest();
      //expect(instance).to.be();
    });

  });

}));
